name: Test Suite for MetalLB

on:
  - pull_request

jobs:
  lint:
    name: Check PEP8 formatting
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Run Python code quality and lint action
      uses: ricardochaves/python-lint@v1.3.0
      with:
        python-root-list: "charms"
        use-flake8: true
        use-pylint: false
        use-pycodestyle: false
        use-black: false
        use-mypy: false
        use-isort: false
        extra-flake8-options: "--max-line-length=88 --max-complexity=10"

  unit-test-metallb-controller:
    name: Unit tests for charm metallb-controller
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8]
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: pip install tox
    - name: Run unit tests with tox
      run: |
        cd charms/metallb-controller
        tox -e unit

  unit-test-metallb-speaker:
    name: Unit tests for charm metallb-speaker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8]
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: pip install tox
    - name: Run unit tests with tox
      run: |
        cd charms/metallb-speaker
        tox -e unit

  func-test-metallb:
    runs-on: ubuntu-latest
    name: Functional test
    timeout-minutes: 10
    strategy:
      matrix:
        rbac: ["without RBAC", "with RBAC"]
    steps:
    - name: Install MicroK8s with microk8s-action
      uses: balchua/microk8s-actions@v0.1.3
      with:
        channel: '1.18/stable'
        rbac: ${{ matrix.rbac == 'with RBAC' }}
        dns: true
        storage: true
    - name: Check out code
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        script/bootstrap
        sudo snap install juju --classic
        sudo snap install juju-wait --classic
    - name: Create tmp dir for artifacts
      run: mkdir -p tmp
    - name: Build charms
      run: |
        make charms
    - name: Bootstrap MicroK8s with Juju
      run: sudo juju bootstrap microk8s microk8s --config test-mode=true --config automatically-retry-hooks=false
    - name: Deploy MetalLB
      run: |
        sudo juju add-model metallb-system
        sudo juju deploy ./bundle --overlay ./docs/local-overlay.yaml
        sudo juju config metallb-controller iprange="10.1.240.240-10.1.240.241"
    - name: Wait for model to error without RBAC rules
      if: ${{ matrix.rbac == 'with RBAC' }}
      run: |
        ! sudo /snap/bin/juju-wait -wv
    - name: Apply RBAC rules for operator pods
      if: ${{ matrix.rbac == 'with RBAC' }}
      run: sudo microk8s.kubectl apply -f docs/rbac-permissions-operators.yaml
    - name: Resolve failures from RBAC
      if: ${{ matrix.rbac == 'with RBAC' }}
      run: |
        sudo juju resolved metallb-controller/0
        sudo juju resolved metallb-speaker/0
    - name: Wait for model to settle
      run: sudo /snap/bin/juju-wait -wv
    - name: Deploy microbot
      run: sudo kubectl apply -f ./docs/example-microbot-lb.yaml
    - name: Wait for microbot to be ready
      run: timeout 2m bash -c 'while true; do status="$(sudo kubectl get pod -lapp=microbot-lb -o jsonpath="{.items[*].status.phase}")"; [ "$status" == "Running Running Running" ] && break; echo "Waiting for microbot ($status)..."; sleep 2; done'
    - name: Curl microbot service LB
      run: |
         if curl --fail --connect-timeout 10 `sudo kubectl get service/microbot-lb \
         --no-headers | awk '{print$4}'`; then echo "curl successfull";
         else exit 1;
         fi
    - name: Collect debug artifacts
      if: ${{ failure() }}
      run: |
        sudo microk8s.kubectl get all -A 2>&1 | tee tmp/microk8s-status-all.txt
        sudo microk8s.kubectl describe deployments -A 2>&1 | tee tmp/microk8s-deployments.txt
        sudo microk8s.kubectl describe replicasets -A 2>&1 | tee tmp/microk8s-replicasets.txt
        sudo microk8s.kubectl describe daemonsets -A 2>&1 | tee tmp/microk8s-daemonsets.txt
        for pod in `sudo microk8s.kubectl get pods -n metallb-system | awk '{print$1}' | grep -v NAME`;
        do sudo microk8s.kubectl logs $pod -n metallb-system 2>&1 | tee tmp/pod-$pod-logs.txt; done
        sudo snap logs -n 300 microk8s 2>&1 | tee tmp/snap-log-microk8s.txt
        sudo juju debug-log --replay --no-tail -i metallb-controller | tee tmp/unit-metallb-controller-0.log
        sudo juju debug-log --replay --no-tail -i metallb-speaker | tee tmp/unit-metallb-speaker-0.log
    - name: Upload debug artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: test-run-artifacts
        path: tmp
