name: Test Suite for MetalLB

on:
  - pull_request

jobs:
  lint:
    name: Check PEP8 formatting
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Run Python code quality and lint action
      uses: ricardochaves/python-lint@v1.3.0
      with:
        python-root-list: "charms"
        use-flake8: true
        use-pylint: false
        use-pycodestyle: false
        use-black: false
        use-mypy: false
        use-isort: false
        extra-flake8-options: "--max-line-length=88 --max-complexity=10"

  unit-test-metallb-controller:
    name: Unit tests for charm metallb-controller
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8]
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: pip install tox
    - name: Run unit tests with tox
      run: |
        cd charms/metallb-controller
        tox -e unit

  unit-test-metallb-speaker:
    name: Unit tests for charm metallb-speaker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8]
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: pip install tox
    - name: Run unit tests with tox
      run: |
        cd charms/metallb-speaker
        tox -e unit

  integration-test-metallb:
    runs-on: ubuntu-latest
    name: Integration test
    timeout-minutes: 15
    strategy:
      matrix:
        rbac: ["without RBAC", "with RBAC"]
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup operator environment
      uses: charmed-kubernetes/actions-operator@main
      with:
        provider: microk8s
    # TODO: move to actions-operator?
    - name: Alias microk8s.kubectl
      run: sudo snap alias microk8s.kubectl kubectl
    # RBAC is enabled by default; TODO: ideally, this would be an option of actions-operator
    - name: Disable RBAC
      if: ${{ matrix.rbac == 'without RBAC' }}
      run: |
        sg microk8s -c "microk8s disable rbac"
        sg microk8s -c "microk8s status --wait-ready"
    - name: Run test
      env:
        RBAC: ${{ matrix.rbac == 'with RBAC' }}
      run: sg microk8s -c "tox -e integration -- --rbac=$RBAC"
    - name: Setup Debug Artifact Collection
      if: ${{ failure() }}
      run: mkdir tmp
    - name: Collect K8s Status
      if: ${{ failure() }}
      run: sudo microk8s.kubectl get all -A 2>&1 | tee tmp/microk8s-status-all.txt
    - name: Collect Juju Status
      if: ${{ failure() }}
      run: sudo juju status 2>&1 | tee tmp/juju-status.txt
    - name: Collect K8s Deployment details
      if: ${{ failure() }}
      run: sudo microk8s.kubectl describe deployments -A 2>&1 | tee tmp/microk8s-deployments.txt
    - name: Collect K8s ReplicaSet details
      if: ${{ failure() }}
      run: sudo microk8s.kubectl describe replicasets -A 2>&1 | tee tmp/microk8s-replicasets.txt
    - name: Collect K8s DaemonSet details
      if: ${{ failure() }}
      run: sudo microk8s.kubectl describe daemonsets -A 2>&1 | tee tmp/microk8s-daemonsets.txt
    - name: Collect K8s pod logs
      if: ${{ failure() }}
      run: |
        for pod in `sudo microk8s.kubectl get pods -n metallb-system | awk '{print$1}' | grep -v NAME`; do
          echo "Pod logs for: $pod"
          echo "----------------------------------"
          sudo microk8s.kubectl logs $pod -n metallb-system 2>&1 | tee tmp/pod-$pod-logs.txt
          echo
          echo
        done
    - name: Collect microk8s snap logs
      if: ${{ failure() }}
      run: sudo snap logs -n 300 microk8s 2>&1 | tee tmp/snap-log-microk8s.txt
    - name: Collect Juju logs for metallb-controller
      if: ${{ failure() }}
      run: sudo juju debug-log --replay --no-tail -i metallb-controller | tee tmp/unit-metallb-controller-0.log
    - name: Collect Juju logs for metallb-speaker
      if: ${{ failure() }}
      run: sudo juju debug-log --replay --no-tail -i metallb-speaker | tee tmp/unit-metallb-speaker-0.log
    - name: Upload debug artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: test-run-artifacts
        path: tmp
